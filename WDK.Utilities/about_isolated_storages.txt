Applications often need to store state information. Every setting on the ubiquitous "Options" dialog needs to be stored somewhere. In this age of disconnected web-service-based applications, users really appreciate it when your application can pull the zip code list off a local disk file instead of making yet another round trip to a web service.

Back in the days of 16-bit windows, when an application needed to store user settings or caches, the INI file was the place to do it. They had a simple text-file format, and Microsoft even supplied some handy API functions to read and write from them. And life was good. Except that the API's had some really annoying file size limitations. And INI files were flat - there was no simple way to represent a hierarchy. And the worst problem: where do you put the INI file? Many applications in those days actually ended up dumping their INI files in the Windows directory, because that was the only directory guaranteed to exist on a Win-16 system.

When the 32-bit Windows systems were introduced, Microsoft took a swing at fixing the problems with INI files by introducing the Windows registry. The registry is hierarchical, so it's easy to represent nested data. There's no limit on the amount of data you can put in there. And since the registry is globally accessible, there's never a question of where your configuration data is. The registry also nicely takes into account the presence of multiple user accounts through the HKEY_CURRENT_USER key, which changes contents based on who is currently logged into the computer.

Of course, experience has brought the glorious dream to dust. The registry can only be edited via the API's, which make it difficult to search and back up. Registries that get too big slow down the entire system. Since all configuration data is available to any program, a simple slip with regedit or in an installer can render the entire system unusable. Large registries make it difficult to find any one particular piece of data. And now we add the concept of downloadable code - do we really want to give arbitrary code downloaded off the net access to our registry just so it can cache a couple of zip codes? If you like that idea, I've got some swampland in Florida you'll be interested in...

Despite the registry's shortcomings, you have to admit that it does solve the real problems of storing application state and settings. How would you fix the problems the registry created? The ideal solution would provide:

Separate files per application so that a particular application's settings are easy to access. 
Per-user files so that different users on the same machine can have their own settings. 
Arbitrary data storage - any data can be stored in any format; hierarchical, flat text, binary, whatever. 
Safety when used from downloaded code; the downloaded code would be unable to access sensitive system information. 
In the .NET Framework, Microsoft has attempted to address the shortcomings of the registry. For the application-wide information (the kind of things you'd put in the HKEY_LOCAL_MACHINE hive in the registry) you have the application's config file. The config file is always in the same directory as the .exe file (solving the "where do I put this?" problem), is XML formatted (solving the "arbitrary data storage" problem for the most part), and each .exe file has its own config file (solving the "separate files per application" part). However, config files are generally for read-only information; they are stored next to the executable file, which is under the Program Files directory. Using any directory under Program Files as writable storage space has always been a bad idea, and under Windows Server 2003 (and future versions of Windows) the Program Files directory and all subdirectories have ACL's that prevent anyone but an Administrator from writing to the directory. So it's ok to create a config file when the administrator installs the program, but don't try to use it for read/write storage. The config file and how to extend it is well documented; here's a good place to start for more information.

But what about the per-user, writable information? Config files don't provide the per-user switching that was so helpful about the HKEY_CURRENT_USER hive in the registry. And writing to the config file is, as mentioned above, a bad idea. Microsoft's solution to storing writable per-user data is Isolated Storage.
